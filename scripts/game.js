import { persistent_card_list } from '../card_images/cardlist.js';var SHUFFLE_STATE = 0; //  0  is  not shuffled yet,  1  is  shuffled,  2  is  wtf;var rearranged_array = [];var current_pull_position = 0;var template_name = [ "sukonbu", "sucorn" ]var persistent_saved_name = "";var const ASSET_URL = "card_images/";/* Snipping array according to cycle_array and last known position. Taking asset_url just to be sure. Known image list in JSON must be hard-coded.*/function set_local_name(){    window.localStorage.setItem("persistent_saved_name", persistent_saved_name);    console.log("persistent_saved_name saved : "+persistent_saved_name);    return persistent_saved_name;}function get_local_name(){    persistent_saved_name = window.localStorage.getItem("persistent_saved_name");    console.log("persistent_saved_name retrieved : "+persistent_saved_name);    return persistent_saved_name;}function create_persistent_saved_name() {    persistent_saved_name = template_name[Math.random()>0.5]+Date.now;    console.log('new name : '+persistent_saved_name);    set_local_name();}function reset_persistent_saved_name() {    create_persistent_saved_name();}function set_local_lpnum(){    window.localStorage.setItem("persistent_lpnum", current_pull_position.toString());    console.log("last_pull_position saved : "+current_pull_position);    return current_pull_position;}function get_local_lpnum(){    //Number will return 0 when null is passed onto it, and localStorage will return 0 upon failure.    current_pull_position = Number(window.localStorage.getItem("persistent_lpnum"));    console.log("last_pull_position retrieved : "+current_pull_position);    return current_pull_position;}export function save_local_last_pull_number(){    set_local_lpnum();}function snip_array(cycle_array, url, last_position){    if(url !== "card_images/")    {        document.getElementById("satollo_result").innerHTML = "Recheck the URL";    }        if(cycle_array == null)    {        throw new Error('cycle_array is empty! Please initialize the array first.');    }        cycle_array.forEach((item) => {        item = item.concat(url, "/", item);    });        return cycle_array.slice(last_position, cycle_array.length);}/*Input: Variables: Name and Last Known Position.Statics: asset url, known image name list in json, known number of images.Processes:1. hash(name)2. cycle(hash)3. snip_array(cycle, asset_url, last_position)4. return snipped_arrayOutput: 1. An array of snipped to length image urls.*//* var last_known_position = -1; */function generate_array(){    var testing_randomizer = new Alea("test");    if(testing_randomizer() != 0.5442283214069903){        window.alert('There\' seem to be a problem in the PRNG, so we can not continue the operations. Please notify the admin. We\'re sorry for the inconviniences.');        throw new Error('Inconsistencies in PRNG! Aborting operations.');    }    if(testing_randomizer() != 0.7071346458978951){        window.alert('There\' seem to be a problem in the PRNG, so we can not continue the operations. Please notify the admin. We\'re sorry for the inconviniences.');        throw new Error('Inconsistencies in PRNG! Aborting operations.');    }    if(testing_randomizer() != 0.7247104682028294){        window.alert('There\' seem to be a problem in the PRNG, so we can not continue the operations. Please notify the admin. We\'re sorry for the inconviniences.');        throw new Error('Inconsistencies in PRNG! Aborting operations.');    }    console.log('randomizer testing completed.');        /* var form_object = document.forms.user_number;    last_known_position = form_object.elements.last_pull_number.value;    var name = form_object.elements.username.value;    console.log(name+" pullnumber="+last_known_position);    current_pull_position = last_known_position; */    current_pull_position = get_local_lpnum();    console.log(persistent_saved_name+" last pull number in local storage = "+current_pull_position);        if(current_pull_position < 0){        console.log('current pull position less than 0. How the hell did this happen.\            current_pull_position = ' + current_pull_position);        current_pull_position = 0;    }        if(current_pull_position > persistent_card_list.length){        //uh.. how did this happen?        throw new Error('Last position larger than array size.('+current_pull_position            +') How did this happen? Resetting pull position to last element in length');        current_pull_position = persistent_card_list.length - 1;    }    if(persistent_saved_name == ""){        create_persistent_saved_name();    }           /* document.getElementById("username_input").setAttribute("disabled", "disabled");    document.getElementById("last_pull_number_input").setAttribute("disabled", "disabled"); */        rearranged_array = sattoloCycle(persistent_card_list, persistent_saved_name);    SHUFFLE_STATE = 1;    /* document.getElementById("satollo_result").innerHTML = rearranged_array;    var final_snipped_array = snip_array(rearranged_array, ASSET_URL, last_known_position);    document.getElementById("result").innerHTML = final_snipped_array;    shuffled_cards = final_snipped_array; */    return 0;}function reset_start_button(){    /* document.getElementById("username_input").removeAttribute("disabled");    document.getElementById("last_pull_number_input").removeAttribute("disabled"); */    document.getElementById("start_button").removeAttribute("disabled");    document.getElementById("card_image").src = "blank.jpg";    return 0;}export function pull_a_card(){    if( SHUFFLE_STATE == 1 ) {        /* document.getElementById("username_input").setAttribute("disabled", "disabled");        document.getElementById("last_pull_number_input").setAttribute("disabled", "disabled"); */        //Just in case something goes wrong somewhere.        if(current_pull_position<0) throw new Error("Critical error: pull position lower than 0 or not an integer");         var currentimage = rearranged_array[current_pull_position++]; //something wrong here.        document.getElementById("LETTER_content_front").src = ASSET_URL+currentimage.front_art;        document.getElementById("LETTER_content_back").src = ASSET_URL+currentimage.back_art;        document.getElementById("cardcaptor_caption").innerHTML =             "Congratulations! You got "+currentimage.artist+"\'s card!";        return 0;    }    else {        generate_array();        pull_a_card();        /* last_known_position++; */        /* form_object.elements.last_pull_number.value = last_known_position; */        return 0;    }    }/* Hash function for unicode to hash int_32Source: https://github.com/nquinlan/better-random-numbers-for-javascript-mirror/blob/master/support/js/Mash.jsfrom the works of Nick Quinlan at Github, which he took from someone else from a now defunct website.*/// From http://baagoe.com/en/RandomMusings/javascript/// Johannes Baagøe <baagoe@baagoe.com>, 2010function Mash() {  var n = 0xefc8249d;  var mash = function(data) {    data = data.toString();    for (var i = 0; i < data.length; i++) {      n += data.charCodeAt(i);      var h = 0.02519603282416938 * n;      n = h >>> 0;      h -= n;      h *= n;      n = h >>> 0;      h -= n;      n += h * 0x100000000; // 2^32    }    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32  };  mash.version = 'Mash 0.9';  return mash;}/* Taken from https://github.com/nquinlan/better-random-numbers-for-javascript-mirror/blob/master/support/js/Alea.jsfrom the works of Nick Quinlan at Github, which he took from someone else from a now defunct website.Modified a little bit for consistency and annotations. */// From http://baagoe.com/en/RandomMusings/javascript/function Alea() {  return (function(args) {    // Johannes Baagøe <baagoe@baagoe.com>, 2010    var s0 = 0;    var s1 = 0;    var s2 = 0;    var c = 1;    if (args.length == 0) {      //args = [+new Date]; //This is the original code.      throw new Error('RNG, 0 argument. Check randomizer.');    }    var mash = Mash();    s0 = mash(' ');    s1 = mash(' ');    s2 = mash(' ');    for (var i = 0; i < args.length; i++) {      s0 -= mash(args[i]);      if (s0 < 0) {        s0 += 1;      }      s1 -= mash(args[i]);      if (s1 < 0) {        s1 += 1;      }      s2 -= mash(args[i]);      if (s2 < 0) {        s2 += 1;      }    }    mash = null; //destroyed the instance for collection.    var random = function() {      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32      s0 = s1;      s1 = s2;      return s2 = t - (c = t | 0);    };    random.uint32 = function() {      return random() * 0x100000000; // 2^32    };    random.fract53 = function() {      return random() +         (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53    };    random.version = 'Alea 0.9';    random.args = args;    return random;  } (Array.prototype.slice.call(arguments)));}/* RNG Function by David Bau:https://github.com/davidbau/seedrandomSattolo's Shuffling Algorithm sources:https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shufflehttps://danluu.com/sattolo/https://rosettacode.org/wiki/Sattolo_cycle */function sattoloCycle(items, seed) {    var alearng = new Alea(seed);    for (var i = items.length-1; i > 0; i--) {        var j = Math.floor(alearng() * i);        var tmp = items[i];        items[i] = items[j];        items[j] = tmp;    }    return items;}